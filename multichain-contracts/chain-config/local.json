[
  {
    "name": "Moonbeam",
    "chainId": 2500,
    "gateway": "0x9E404e6ff4F2a15C99365Bd6615fCE3FB9E9Cb76",
    "gasService": "0x783ce2eF32Aa74B41c8EbbbeC6F632b6Da00C1e9",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "GMPExpressService": {
      "expressOperator": "0xA523c5d5c46bE9BAEECE726A3211ea2be316766A",
      "salt": "GMPExpressService",
      "address": "0x5A8b2B50a73E83aAfE73c636ed2D11db9c0e8203",
      "implementation": "0x5A8b2B50a73E83aAfE73c636ed2D11db9c0e8203",
      "deployer": "0xA523c5d5c46bE9BAEECE726A3211ea2be316766A",
      "proxyDeployer": "0x6D8b94118B7BE6308eBcB614D34986e97F9A4056"
    },
    "rpc": "http://localhost:8500/0",
    "tokenName": "DEV",
    "tokenSymbol": "DEV",
    "oracleContract": {
      "abi": [
        "constructor()",
        "function checkOracle() pure returns (bool[2])"
      ],
      "address": "0x29dcFe9cEC4cd7d710A3EdB098716d63922c736d"
    },
    "coreContract": {
      "abi": [
        "constructor(string _paymentToken, address _axelarGatewayAddress, address _gasReceiver)",
        "error InvalidAddress()",
        "error InvalidAddressString()",
        "error NotApprovedByGateway()",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event newPolicyAdded(uint256 indexed policyNumber, address indexed insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "event newUserAdded(uint256 indexed policyNumber, string indexed userChain, address userAddress)",
        "function InsurancePolicies(uint256) view returns (address insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost, uint256 policyNumber, uint256 premiumsTotal, bool isPolicyActive)",
        "function addCollector(string chain, address collectorAddress)",
        "function addPolicyUser(uint256 policyNumber, string userChain, address userAddress)",
        "function axInsureCollectors(string) view returns (address)",
        "function checkOracleAndPayout(uint256 policyNumber)",
        "function createInsurancePolicy(address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getPaymentToken() view returns (string)",
        "function owner() view returns (address)",
        "function paymentToken() view returns (string)",
        "function paymentTokenAddress() view returns (address)",
        "function policyUsers(uint256, uint256) view returns (string userChain, address userAddress)",
        "function renounceOwnership()",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xc20AB0E840B400B34e0Bd8C00E2898c73047c085"
    },
    "collectorContract": {
      "abi": [
        "constructor(address _axinsureCoreDstAddress, string _axinsureCoreDstChain, address _axelarGatewayAddress, string _paymentToken, address _gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "function addPolicyUserOnDstChain(uint256 policyNumber) payable",
        "function axinsureCoreDstAddress() view returns (address)",
        "function axinsureCoreDstChain() view returns (string)",
        "function collectPayoutsOnDstChain(uint256 policyNumber)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function paymentToken() view returns (string)"
      ],
      "address": "0x9B2DE210Cf202C6F292E599054F9Bf911CE638A8"
    }
  },
  {
    "name": "Avalanche",
    "chainId": 2501,
    "gateway": "0x54C156f087EBA12a869E0CBb49548c3F55E80edC",
    "gasService": "0xD3cB555CB530C3374B122242b15d2943445c31d6",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "GMPExpressService": {
      "expressOperator": "0x26A3B0F45fCA655Cb6C2c0498C6870394A5a8b93",
      "salt": "GMPExpressService",
      "address": "0xC89c53D6C7031DA523387f72588380900955533D",
      "implementation": "0xC89c53D6C7031DA523387f72588380900955533D",
      "deployer": "0x26A3B0F45fCA655Cb6C2c0498C6870394A5a8b93",
      "proxyDeployer": "0x311837955A39a29D37E3bb506d3aca32365F0511"
    },
    "rpc": "http://localhost:8500/1",
    "tokenName": "Avax",
    "tokenSymbol": "AVAX",
    "oracleContract": {
      "abi": [
        "constructor()",
        "function checkOracle() pure returns (bool[2])"
      ],
      "address": "0x29dcFe9cEC4cd7d710A3EdB098716d63922c736d"
    },
    "coreContract": {
      "abi": [
        "constructor(string _paymentToken, address _axelarGatewayAddress, address _gasReceiver)",
        "error InvalidAddress()",
        "error InvalidAddressString()",
        "error NotApprovedByGateway()",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event newPolicyAdded(uint256 indexed policyNumber, address indexed insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "event newUserAdded(uint256 indexed policyNumber, string indexed userChain, address userAddress)",
        "function InsurancePolicies(uint256) view returns (address insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost, uint256 policyNumber, uint256 premiumsTotal, bool isPolicyActive)",
        "function addCollector(string chain, address collectorAddress)",
        "function addPolicyUser(uint256 policyNumber, string userChain, address userAddress)",
        "function axInsureCollectors(string) view returns (address)",
        "function checkOracleAndPayout(uint256 policyNumber)",
        "function createInsurancePolicy(address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getPaymentToken() view returns (string)",
        "function owner() view returns (address)",
        "function paymentToken() view returns (string)",
        "function paymentTokenAddress() view returns (address)",
        "function policyUsers(uint256, uint256) view returns (string userChain, address userAddress)",
        "function renounceOwnership()",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xc20AB0E840B400B34e0Bd8C00E2898c73047c085"
    },
    "collectorContract": {
      "abi": [
        "constructor(address _axinsureCoreDstAddress, string _axinsureCoreDstChain, address _axelarGatewayAddress, string _paymentToken, address _gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "function addPolicyUserOnDstChain(uint256 policyNumber) payable",
        "function axinsureCoreDstAddress() view returns (address)",
        "function axinsureCoreDstChain() view returns (string)",
        "function collectPayoutsOnDstChain(uint256 policyNumber)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function paymentToken() view returns (string)"
      ],
      "address": "0x9B2DE210Cf202C6F292E599054F9Bf911CE638A8"
    }
  },
  {
    "name": "Fantom",
    "chainId": 2502,
    "gateway": "0xcb189eB52ca573eFD633d07A3B5357e4d989D743",
    "gasService": "0x85Fa9202C6Be69e9889CC0247Af72ABc70DbF542",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "GMPExpressService": {
      "expressOperator": "0xd7D1A49eaA8a927dAD156fBbfe675f8eA7cdCf9C",
      "salt": "GMPExpressService",
      "address": "0xfFA0EF8701960F8292d3aE5f6AC22C7fA70Da0d6",
      "implementation": "0xfFA0EF8701960F8292d3aE5f6AC22C7fA70Da0d6",
      "deployer": "0xd7D1A49eaA8a927dAD156fBbfe675f8eA7cdCf9C",
      "proxyDeployer": "0x6770030F3a6422fE238204Df73d04c58AFe4808A"
    },
    "rpc": "http://localhost:8500/2",
    "tokenName": "Fantom",
    "tokenSymbol": "FTM",
    "oracleContract": {
      "abi": [
        "constructor()",
        "function checkOracle() pure returns (bool[2])"
      ],
      "address": "0x29dcFe9cEC4cd7d710A3EdB098716d63922c736d"
    },
    "coreContract": {
      "abi": [
        "constructor(string _paymentToken, address _axelarGatewayAddress, address _gasReceiver)",
        "error InvalidAddress()",
        "error InvalidAddressString()",
        "error NotApprovedByGateway()",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event newPolicyAdded(uint256 indexed policyNumber, address indexed insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "event newUserAdded(uint256 indexed policyNumber, string indexed userChain, address userAddress)",
        "function InsurancePolicies(uint256) view returns (address insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost, uint256 policyNumber, uint256 premiumsTotal, bool isPolicyActive)",
        "function addCollector(string chain, address collectorAddress)",
        "function addPolicyUser(uint256 policyNumber, string userChain, address userAddress)",
        "function axInsureCollectors(string) view returns (address)",
        "function checkOracleAndPayout(uint256 policyNumber)",
        "function createInsurancePolicy(address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getPaymentToken() view returns (string)",
        "function owner() view returns (address)",
        "function paymentToken() view returns (string)",
        "function paymentTokenAddress() view returns (address)",
        "function policyUsers(uint256, uint256) view returns (string userChain, address userAddress)",
        "function renounceOwnership()",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xc20AB0E840B400B34e0Bd8C00E2898c73047c085"
    },
    "collectorContract": {
      "abi": [
        "constructor(address _axinsureCoreDstAddress, string _axinsureCoreDstChain, address _axelarGatewayAddress, string _paymentToken, address _gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "function addPolicyUserOnDstChain(uint256 policyNumber) payable",
        "function axinsureCoreDstAddress() view returns (address)",
        "function axinsureCoreDstChain() view returns (string)",
        "function collectPayoutsOnDstChain(uint256 policyNumber)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function paymentToken() view returns (string)"
      ],
      "address": "0x9B2DE210Cf202C6F292E599054F9Bf911CE638A8"
    }
  },
  {
    "name": "Ethereum",
    "chainId": 2503,
    "gateway": "0x013459EC3E8Aeced878C5C4bFfe126A366cd19E9",
    "gasService": "0x28f8B50E1Be6152da35e923602a2641491E71Ed8",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "GMPExpressService": {
      "expressOperator": "0x3011D1163eEE4512e5E36A558B72220D86Bd7FD6",
      "salt": "GMPExpressService",
      "address": "0xc918b5BA9127677fDbc39C5e3005047F6565dce6",
      "implementation": "0xc918b5BA9127677fDbc39C5e3005047F6565dce6",
      "deployer": "0x3011D1163eEE4512e5E36A558B72220D86Bd7FD6",
      "proxyDeployer": "0xd053BBBDfEB0f29808d48E39fC10d511D9349314"
    },
    "rpc": "http://localhost:8500/3",
    "tokenName": "Ether",
    "tokenSymbol": "ETH",
    "oracleContract": {
      "abi": [
        "constructor()",
        "function checkOracle() pure returns (bool[2])"
      ],
      "address": "0x29dcFe9cEC4cd7d710A3EdB098716d63922c736d"
    },
    "coreContract": {
      "abi": [
        "constructor(string _paymentToken, address _axelarGatewayAddress, address _gasReceiver)",
        "error InvalidAddress()",
        "error InvalidAddressString()",
        "error NotApprovedByGateway()",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event newPolicyAdded(uint256 indexed policyNumber, address indexed insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "event newUserAdded(uint256 indexed policyNumber, string indexed userChain, address userAddress)",
        "function InsurancePolicies(uint256) view returns (address insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost, uint256 policyNumber, uint256 premiumsTotal, bool isPolicyActive)",
        "function addCollector(string chain, address collectorAddress)",
        "function addPolicyUser(uint256 policyNumber, string userChain, address userAddress)",
        "function axInsureCollectors(string) view returns (address)",
        "function checkOracleAndPayout(uint256 policyNumber)",
        "function createInsurancePolicy(address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getPaymentToken() view returns (string)",
        "function owner() view returns (address)",
        "function paymentToken() view returns (string)",
        "function paymentTokenAddress() view returns (address)",
        "function policyUsers(uint256, uint256) view returns (string userChain, address userAddress)",
        "function renounceOwnership()",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xc20AB0E840B400B34e0Bd8C00E2898c73047c085"
    },
    "collectorContract": {
      "abi": [
        "constructor(address _axinsureCoreDstAddress, string _axinsureCoreDstChain, address _axelarGatewayAddress, string _paymentToken, address _gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "function addPolicyUserOnDstChain(uint256 policyNumber) payable",
        "function axinsureCoreDstAddress() view returns (address)",
        "function axinsureCoreDstChain() view returns (string)",
        "function collectPayoutsOnDstChain(uint256 policyNumber)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function paymentToken() view returns (string)"
      ],
      "address": "0x9B2DE210Cf202C6F292E599054F9Bf911CE638A8"
    }
  },
  {
    "name": "Polygon",
    "chainId": 2504,
    "gateway": "0xc7B788E88BAaB770A6d4936cdcCcd5250E1bbAd8",
    "gasService": "0xC573c722e21eD7fadD38A8f189818433e01Ae466",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "GMPExpressService": {
      "expressOperator": "0x3E41c6473A51aD613796d5758d01f1c037Adf94F",
      "salt": "GMPExpressService",
      "address": "0x194598519587185673fec0E2C3e9F9Ed94bF2451",
      "implementation": "0x194598519587185673fec0E2C3e9F9Ed94bF2451",
      "deployer": "0x3E41c6473A51aD613796d5758d01f1c037Adf94F",
      "proxyDeployer": "0x98d7d56c3F29F31997A622bfA17197Ce25695dCe"
    },
    "rpc": "http://localhost:8500/4",
    "tokenName": "Matic",
    "tokenSymbol": "MATIC",
    "oracleContract": {
      "abi": [
        "constructor()",
        "function checkOracle() pure returns (bool[2])"
      ],
      "address": "0x29dcFe9cEC4cd7d710A3EdB098716d63922c736d"
    },
    "coreContract": {
      "abi": [
        "constructor(string _paymentToken, address _axelarGatewayAddress, address _gasReceiver)",
        "error InvalidAddress()",
        "error InvalidAddressString()",
        "error NotApprovedByGateway()",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event newPolicyAdded(uint256 indexed policyNumber, address indexed insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "event newUserAdded(uint256 indexed policyNumber, string indexed userChain, address userAddress)",
        "function InsurancePolicies(uint256) view returns (address insurerAddress, address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost, uint256 policyNumber, uint256 premiumsTotal, bool isPolicyActive)",
        "function addCollector(string chain, address collectorAddress)",
        "function addPolicyUser(uint256 policyNumber, string userChain, address userAddress)",
        "function axInsureCollectors(string) view returns (address)",
        "function checkOracleAndPayout(uint256 policyNumber)",
        "function createInsurancePolicy(address oracleAddress, uint256 fundingAmount, uint256 payoutAmount, uint256 premiumsCost)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getPaymentToken() view returns (string)",
        "function owner() view returns (address)",
        "function paymentToken() view returns (string)",
        "function paymentTokenAddress() view returns (address)",
        "function policyUsers(uint256, uint256) view returns (string userChain, address userAddress)",
        "function renounceOwnership()",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xc20AB0E840B400B34e0Bd8C00E2898c73047c085"
    },
    "collectorContract": {
      "abi": [
        "constructor(address _axinsureCoreDstAddress, string _axinsureCoreDstChain, address _axelarGatewayAddress, string _paymentToken, address _gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "function addPolicyUserOnDstChain(uint256 policyNumber) payable",
        "function axinsureCoreDstAddress() view returns (address)",
        "function axinsureCoreDstChain() view returns (string)",
        "function collectPayoutsOnDstChain(uint256 policyNumber)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function paymentToken() view returns (string)"
      ],
      "address": "0x9B2DE210Cf202C6F292E599054F9Bf911CE638A8"
    }
  }
]
